# -*- coding: utf-8 -*-
"""GF Dashboard Trial.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iQinSnaG5xorJ8U3SFLf2gbSTyFwCn9S
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import networkx as nx
import tempfile
import os

# Set page config
st.set_page_config(page_title="Dashboard", layout="wide")

# Title
st.title("ðŸ“Š Dashboard: GF 2025 Project Overview")

# Upload file from local or use fixed path (adjust as needed)
file_path = "C:/Users/Acer/Downloads/GF 2025 (dashboard automate).xlsx"

# Read Excel
@st.cache_data
def load_data(path):
    return pd.read_excel(path, sheet_name="Data Summary")

data = load_data(file_path)

# Pie Charts Section
st.header("ðŸ”„ 1st & 2nd Cut Status Overview")

# 1st Cut Status
first_cut_status = [
    data['1st Cut Pending'].sum(),
    data['1st Cut POR Pending'].sum(),
    data['1st Cut POR Closed'].sum(),
    data['1st Cut PO Canceled'].sum()
]
labels_first_cut = ['Pending', 'POR Pending', 'POR Closed', 'PO Canceled']
colors_first_cut = ['#ff9999','#66b3ff','#99ff99','#ffcc99']

# 2nd Cut Status
second_cut_status = [
    data['2nd Cut Pending'].sum(),
    data['2nd Cut POR Open'].sum(),
    data['2nd Cut POR Closed'].sum(),
    data['No 2nd Cut PO'].sum(),
    data['2nd Cut PO Canceled'].sum()
]
labels_second_cut = ['Pending', 'POR Open', 'POR Closed', 'No PO', 'PO Canceled']
colors_second_cut = ['#c2c2f0', '#ffb3e6', '#c2f0c2', '#f0c2c2', '#f0e68c']

# Create side-by-side subplots
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 7))

# 1st Cut Pie Chart
wedges1, texts1, autotexts1 = ax1.pie(
    x=first_cut_status,
    labels=None,
    autopct='%d%%',
    startangle=90,
    colors=colors_first_cut,
    pctdistance=1.2
)
ax1.legend(
    wedges1, labels_first_cut,
    title="1st Cut Status",
    loc="center left",
    bbox_to_anchor=(1, 0.5)
)
ax1.set_title("1st Cut Status")

# 2nd Cut Pie Chart
wedges2, texts2, autotexts2 = ax2.pie(
    x=second_cut_status,
    labels=None,
    autopct='%d%%',
    startangle=90,
    colors=colors_second_cut,
    pctdistance=1.2
)
ax2.legend(
    wedges2, labels_second_cut,
    title="2nd Cut Status",
    loc="center left",
    bbox_to_anchor=(1, 0.5)
)
ax2.set_title("2nd Cut Status")

# Adjust layout
plt.tight_layout()
st.pyplot(fig)  # Use Streamlit's method to display the plot



# Project Hierarchy Section
st.header("ðŸŒ³ Site Progress")
# Hierarchy and data mapping (NodeID, ParentID, Column formula)
hierarchy = [
    ("Total Sites", None, "ASSR Status"),
    ("ASSR Approved", "Total Sites", "ASSR Approved"),
    ("ASSR Pending Approval", "Total Sites", "ASSR Pending Approval"),
    ("ASSR Pending Submission", "Total Sites", "ASSR Pending Submission"),
    ("TSSR Submitted", "ASSR Approved", "TP Pending Approval + TP Approved"),
    ("TSSR Pending Submission", "ASSR Approved", "TP Pending Submission"),
    ("TSSR Full Approved", "TSSR Submitted", "TP Approved"),
    ("Tx Approved", "TSSR Submitted", "Tx Approved"),
    ("Tx Pending Approval", "TSSR Submitted", "Tx Pending Approval"),
    ("Tx Pending Submission", "TSSR Submitted", "Tx Pending Submission"),
    ("RF Approved", "TSSR Submitted", "RF Approved"),
    ("RF Pending Submission", "TSSR Submitted", "RF Pending Submission"),
    ("RF Pending Approval", "TSSR Submitted", "RF Pending Approval"),
    ("FF Approved", "TSSR Submitted", "FF Approved"),
    ("FF Pending Submission", "TSSR Submitted", "FF Pending Submission"),
    ("FF Pending Approval", "TSSR Submitted", "FF Pending Approval"),
    ("Structure Ready", "TSSR Full Approved", "Structure Ready"),
    ("Structure Not Ready", "TSSR Full Approved", "Structure Not Ready"),
    ("Structure HO Done", "Structure Ready", "Structure HO Done"),
    ("Structure HO Pending", "Structure Ready", "Structure HO Pending"),
    ("CME Done", "Structure HO Done", "CME Done"),
    ("CME WIP", "Structure HO Done", "CME WIP"),
    ("CME Not Started", "Structure HO Done", "CME Not Started"),
    ("Accrual Approved", "Structure HO Done", "AA approved"),
    ("Accrual Pending Approval", "Structure HO Done", "AA Pending Approval"),
    ("Accrual Pending Submission", "Structure HO Done", "AA Pending Submission"),
    ("CME HO Done", "CME Done", "CME HO Done"),
    ("CME HO Pending", "CME Done", "CME HO Pending"),
    ("TI Done", "CME HO Done", "TI Done"),
    ("TI WIP", "CME HO Done", "TI WIP"),
    ("TI Pending", "CME HO Done", "TI Not Started"),
    ("TI HO Done", "TI Done", "TI HO Done"),
    ("TI HO Pending", "TI Done", "TI HO Pending"),
    ("MTP Approved", "Tx Approved", ""),
    ("MTP Pending Approval", "Tx Approved", ""),
    ("MTP Pending Submission", "Tx Approved", ""),
    ("FE Approved", "Tx Approved", ""),
    ("FE Pending Approval", "Tx Approved", ""),
    ("FE Pending Submission", "Tx Approved", "")
]


# Build the graph
G = nx.DiGraph()
labels = {}
layer_map = {}  # Track layer (depth) of each node

def add_to_graph(node, parent, column_formula):
    # Add node and edge
    if parent:
        G.add_edge(parent, node)
        layer_map[node] = layer_map.get(parent, 0) + 1
    else:
        G.add_node(node)
        layer_map[node] = 0

    # Compute count
    if column_formula.strip() == "":
        count = "N/A"
    else:
        col_parts = [c.strip() for c in column_formula.split('+')]
        count = 0
        for col in col_parts:
            if col in data.columns:
                count += data[col].sum()
            else:
                count = "N/A"
                break

    labels[node] = f"{node}\n{count if count != 'N/A' else 'N/A'}"

# Add all nodes
for node, parent, column_formula in hierarchy:
    add_to_graph(node, parent, column_formula)

# Create positions using multipartite layout
# Set each nodeâ€™s "layer" attribute
for node in G.nodes():
    G.nodes[node]['layer'] = layer_map[node]

# Use multipartite layout to mimic horizontal layers
pos = nx.multipartite_layout(G, subset_key="layer")

# Draw
plt.figure(figsize=(30, 18))
nx.draw(
    G, pos,
    with_labels=True,
    labels=labels,
    node_shape='s',
    node_color='#AED6F1',
    node_size=4000,
    font_size=8,
    font_weight='bold',
    edge_color='gray'
)
plt.title("Site Progress", fontsize=16)
plt.axis('off')
st.pyplot(plt)